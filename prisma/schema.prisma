generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  ADMIN
  BARBER
  CLIENT
  ATTENDANT
  MANAGER
  OWNER
}

enum PermissionName {
  LIST_USER_ALL
  LIST_USER_UNIT
  LIST_USER_ORG
  UPDATE_USER_ADMIN
  UPDATE_USER_OWNER
  UPDATE_USER_BARBER
  MANAGE_OTHER_USER_TRANSACTION
  LIST_PERMISSIONS_ALL
  LIST_ROLES_UNIT
  LIST_SALES_UNIT
  LIST_APPOINTMENTS_UNIT
  LIST_SERVICES_UNIT
  SELL_PRODUCT
  SELL_SERVICE
  SELL_APPOINTMENT
  ACCEPT_APPOINTMENT
  CREATE_SALE
  CREATE_USER_OWNER
  CREATE_USER_MANAGER
  CREATE_USER_ATTENDANT
  CREATE_USER_BARBER
  CREATE_USER_CLIENT
  CREATE_USER_ADMIN
  MANAGE_USER_TRANSACTION_ADD
  MANAGE_USER_TRANSACTION_WITHDRAWAL
  LIST_UNIT_ALL
  LIST_UNIT_ORG
  LIST_ROLES_ALL
  MANAGE_SELF_BLOCKED_HOURS
  MANAGE_SELF_WORK_HOURS
  MENAGE_USERS_WORKING_HOURS
  MENAGE_USERS_BLOCKED_HOURS
}

enum PermissionCategory {
  UNIT
  SERVICE
  USER
  PRODUCT
  PROFILE
  ROLE
  PERMISSIONS
  SALE
  TRANSACTION
  APPOINTMENT
}

enum PaymentMethod {
  CASH
  PIX
  CREDIT_CARD
  DEBIT_CARD
}

enum TransactionType {
  ADDITION
  WITHDRAWAL
}

enum DiscountType {
  PERCENTAGE
  VALUE
}

enum PaymentStatus {
  PAID
  PENDING
}

enum CommissionCalcType {
  PERCENTAGE_OF_ITEM
  PERCENTAGE_OF_USER
  PERCENTAGE_OF_USER_ITEM
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELED
  IN_ATTENDANCE
  CONCLUDED
  NO_SHOW
}

model Role {
  id          String       @id @default(uuid())
  name        RoleName
  unitId      String
  permissions Permission[] @relation("RolePermissions")
  profiles    Profile[]
  unit        Unit         @relation(fields: [unitId], references: [id])

  @@map("roles")
}

model Permission {
  id       String              @id @default(uuid())
  name     PermissionName      @unique
  category PermissionCategory
  roles    Role[]              @relation("RolePermissions")
  profiles  Profile[]            @relation("ProfilePermissions")

  @@map("permissions")
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  email                String                @unique
  password             String
  active               Boolean               @default(false)
  organizationId       String
  unitId               String
  profile              Profile?
  appointments         Appointment[]         @relation("ClientAppointments")
  barberAppointments   Appointment[]         @relation("BarberAppointments")
  sales                Sale[]
  clientSales          Sale[]                @relation("SaleClient")
  saleItems            SaleItem[]
  transactions         Transaction[]
  affectedTransactions Transaction[]         @relation("AffectedUser")
  sessions             CashRegisterSession[]
  passwordResetTokens  PasswordResetToken[]
  versionToken         Int      @default(1)
  versionTokenInvalidate Int?
  createdAt            DateTime              @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  unit         Unit         @relation(fields: [unitId], references: [id])

  @@map("users")
}

model Profile {
  id                   String   @id @default(uuid())
  phone                String
  cpf                  String
  genre                String
  birthday             String
  pix                  String
  permissions          Permission[] @relation("ProfilePermissions")
  roleId               String
  role                 Role @relation(fields: [roleId], references: [id])
  commissionPercentage Float    @default(0)
  totalBalance         Float    @default(0)
  barberServices       BarberService[]
  barberProducts       BarberProduct[]
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id])
  createdAt            DateTime @default(now())
  workHours            ProfileWorkHour[]
  blockedHours         ProfileBlockedHour[]

  @@map("profiles")
}

model Appointment {
  id        String   @id @default(uuid())
  clientId  String
  barberId  String
  unitId    String
  date      DateTime
  status    AppointmentStatus @default(SCHEDULED)
  durationService Int?
  observation String?
  discount   Float?    @default(0)
  value      Float?
  saleItem   SaleItem?

  client  User    @relation("ClientAppointments", fields: [clientId], references: [id])
  barber  User    @relation("BarberAppointments", fields: [barberId], references: [id])
  services AppointmentService[]
  unit    Unit    @relation(fields: [unitId], references: [id])

  @@map("appointments")
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?
  imageUrl     String?
  cost         Float
  price        Float
  category     String?
  defaultTime  Int?
  commissionPercentage Float?
  unitId       String
  appointmentServices AppointmentService[]
  saleItems    SaleItem[]
  barberServices BarberService[]

  unit Unit @relation(fields: [unitId], references: [id])

  @@map("services")
}

model BarberService {
  id        String            @id @default(uuid())
  profileId String
  serviceId String
  time      Int?
  commissionPercentage Float?
  commissionType CommissionCalcType @default(PERCENTAGE_OF_ITEM)

  profile Profile @relation(fields: [profileId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@unique([profileId, serviceId])
  @@map("barber_services")
}

model BarberProduct {
  id        String            @id @default(uuid())
  profileId String
  productId String
  commissionPercentage Float?
  commissionType CommissionCalcType @default(PERCENTAGE_OF_ITEM)

  profile Profile @relation(fields: [profileId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([profileId, productId])
  @@map("barber_products")
}

model AppointmentService {
  id            String   @id @default(uuid())
  appointmentId String
  serviceId     String

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])

  @@unique([appointmentId, serviceId])
  @@map("appointment_services")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  quantity    Int        @default(0)
  cost        Float
  commissionPercentage Float?
  price       Float
  unitId      String
  saleItems   SaleItem[]
  barberProducts BarberProduct[]

  unit Unit @relation(fields: [unitId], references: [id])

  @@map("products")
}

model Transaction {
  id                    String          @id @default(uuid())
  userId                String
  affectedUserId        String?
  unitId                String
  cashRegisterSessionId String?
  type                  TransactionType
  description           String
  amount                Float
  isLoan                Boolean       @default(false)
  receiptUrl            String?
  createdAt             DateTime        @default(now())

  saleId String?
  sale   Sale?          @relation(fields: [saleId], references: [id])

  user         User                 @relation(fields: [userId], references: [id])
  affectedUser User?                @relation("AffectedUser", fields: [affectedUserId], references: [id])
  unit         Unit                 @relation(fields: [unitId], references: [id])
  session      CashRegisterSession? @relation(fields: [cashRegisterSessionId], references: [id])

  @@map("transactions")
}

model Sale {
  id            String        @id @default(uuid())
  userId        String
  clientId      String
  unitId        String
  sessionId     String?
  couponId      String?
  total         Float
  method        PaymentMethod
  paymentStatus PaymentStatus @default(PAID)
  createdAt     DateTime      @default(now())
  observation   String?

  user         User                 @relation(fields: [userId], references: [id])
  client       User                 @relation("SaleClient", fields: [clientId], references: [id])
  items        SaleItem[]
  unit         Unit                 @relation(fields: [unitId], references: [id])
  coupon       Coupon?              @relation(fields: [couponId], references: [id])
  session      CashRegisterSession? @relation(fields: [sessionId], references: [id])
  transactions Transaction[]

  @@map("sales")
}

model SaleItem {
  id                  String        @id @default(uuid())
  saleId              String
  serviceId           String?
  productId           String?
  quantity            Int           @default(1)
  barberId            String?
  appointmentId       String? @unique
  couponId            String?
  price               Float
  discount            Float?
  discountType        DiscountType?
  porcentagemBarbeiro Float?

  sale    Sale     @relation(fields: [saleId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  barber  User?    @relation(fields: [barberId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  coupon  Coupon?  @relation(fields: [couponId], references: [id])

  @@map("sale_items")
}

model CashRegisterSession {
  id            String    @id @default(uuid())
  openedById    String
  unitId        String
  openedAt      DateTime  @default(now())
  closedAt      DateTime?
  initialAmount Float
  finalAmount   Float?

  user         User          @relation(fields: [openedById], references: [id])
  unit         Unit          @relation(fields: [unitId], references: [id])
  sales        Sale[]
  transactions Transaction[]

  @@map("cash_register_sessions")
}

model Coupon {
  id           String       @id @default(uuid())
  code         String       @unique
  description  String?
  discount     Float
  discountType DiscountType @default(PERCENTAGE)
  imageUrl     String?
  quantity     Int          @default(0)
  unitId       String
  createdAt    DateTime     @default(now())
  sales        Sale[]
  saleItems    SaleItem[]

  unit Unit @relation(fields: [unitId], references: [id])

  @@map("coupons")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model Organization {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  users        User[]
  units        Unit[]
  totalBalance Float    @default(0)
  createdAt    DateTime @default(now())

  @@map("organizations")
}

model Unit {
  id             String                @id @default(uuid())
  name           String
  slug           String                @unique
  organizationId String
  totalBalance   Float                 @default(0)
  allowsLoan     Boolean               @default(false)
  slotDuration   Int                   @default(60)
  services       Service[]
  products       Product[]
  appointments   Appointment[]
  sales          Sale[]
  transactions   Transaction[]
  sessions       CashRegisterSession[]
  users          User[]
  roles          Role[]
  openingHours       UnitOpeningHour[]

  organization Organization @relation(fields: [organizationId], references: [id])
  Coupon       Coupon[]

  @@map("units")
}


model UnitOpeningHour {
  id        String   @id @default(uuid())
  unitId    String
  weekDay   Int
  startHour String
  endHour   String

  unit Unit @relation(fields: [unitId], references: [id])

  @@map("unit_opening_hours")
}

model ProfileWorkHour {
  id        String   @id @default(uuid())
  profileId String
  weekDay   Int
  startHour String
  endHour   String

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("profile_work_hours")
}

model ProfileBlockedHour {
  id        String   @id @default(uuid())
  profileId String
  startHour DateTime
  endHour   DateTime

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("profile_blocked_hours")
}
